// REBELS 4976 DOOMSDAY CLOCK
// David Perna, Daniel Wolff, Ben Ecclestone, Reid Perna
// 5/13/2015

// DATASHEETS //
// Shift Register: http://www.nxp.com/documents/data_sheet/74HC_HCT595.pdf
// 7-Segment Display: http://pdf.datasheetcatalog.com/datasheet/vishay/83125.pdf
// Real Time Clock: http://datasheets.maximintegrated.com/en/ds/DS1307.pdf

// Include I2C Library
#include <Wire.h>
// DS_pin -> Serial Input to shift register through pin 2 on UNO.
byte DS_pin = 2;
// STCP_pin -> Storage Register clock input on shift register through pin 3 on UNO.
byte STCP_pin = 3;
// SHCP_pin -> Shift Register click input on shift register through pin 4 on UNO.
byte SHCP_pin = 4;

// Integer variables for the time.
int seconds, minutes, hours, weekDays, monthDays, months, years;

// Number of Segment Displays being used.
byte numSegDisplays = 2;
// Number of total segments.
byte numSegments = byte(numSegDisplays * 7); 
// Bit registery for segments.
boolean segments[14];

//Segment is on when bit is low.
boolean bitOff = true;

// Conversion from Binary Coded Decimal to Decimal
byte bcdToDec(byte val)
{
  return ( (val / 16 * 10) + (val % 16) );
}

// Resets the segments to being all on.
void resetSegments() {
  for (int i = 0; i < numSegments; i++) {
    segments[i] = !bitOff;
  }
}

// Writes the bit registry for segments to the shift register.
void writeToSegments() {
  // Lower the STCP to let the shift register know data is being sent.
  digitalWrite(STCP_pin, LOW);

  // For all of the segments...
  for (int i = 0; i < numSegments; i++) {
    // Lower the SCHP pin to let the shift register know a bit is being sent.
    digitalWrite(SHCP_pin, LOW);
    // Send the byte.
    digitalWrite(DS_pin, segments[i]);
    // Raise the SCHP pin to let the shift register know the bit has been sent.
    digitalWrite(SHCP_pin, HIGH);
  }
  // Raise the SCHP pin to let the shirt register know that all data has been sent, and can be sent to the segment displays.
  digitalWrite(STCP_pin, HIGH);
}

// Takes a byte value (0-9) and position of the value in the bit registery, and matches it with its correct segments.
void intToSeg(byte val, int pos) {
  // Array value -> Segment :
  // 5 + pos -> a
  // 4 + pos -> b
  // 3 + pos -> c
  // 2 + pos -> d
  // 1 + pos -> e
  // 0 + pos -> f
  // 6 + pos -> g

  switch (val) {
    case 0:
      segments[6 + pos] = bitOff;
      break;
    case 1:
      segments[5 + pos] = bitOff;
      segments[2 + pos] = bitOff;
      segments[1 + pos] = bitOff;
      segments[0 + pos] = bitOff;
      segments[6 + pos] = bitOff;
      break;

    case 2:
      segments[3 + pos] = bitOff;
      segments[0 + pos] = bitOff;
      break;
    case 3:
      segments[1 + pos] = bitOff;
      segments[0 + pos] = bitOff;
      break;
    case 4:
      segments[5 + pos] = bitOff;
      segments[2 + pos] = bitOff;
      segments[1 + pos] = bitOff;
      break;
    case 5:
      segments[4 + pos] = bitOff;
      segments[1 + pos] = bitOff;
      break;
    case 6:
      segments[4 + pos] = bitOff;
      break;
    case 7:
      segments[2 + pos] = bitOff;
      segments[1 + pos] = bitOff;
      segments[0 + pos] = bitOff;
      segments[6 + pos] = bitOff;
      break;
    case 8:
      break;
    case 9:
      segments[1 + pos] = bitOff;
      break;

  }
}

// Takes the seconds, minutes, and hours from the Real Time Clock and converts them into segments.
void convertToSeg(byte s, byte m, byte h) {
  // Seconds
  {
    // Ones digits:
    intToSeg((60-s) % 10, 0);
    // Tens digits:
    intToSeg(((60-s)-((60-s)%10))/10,7);
  }
}

// Setup
void setup()
{
  // Begin I2C
  Wire.begin();
  // Start Serial output. (56700 BAUD or higher works best).
  Serial.begin(57600);

  // Set the pin modes for the DS, STCP, and SHCP pins to OUTPUT.
  pinMode(DS_pin, OUTPUT);
  pinMode(STCP_pin, OUTPUT);
  pinMode(SHCP_pin, OUTPUT);

  // Open I2C line in write mode
  Wire.beginTransmission(0x68);
  // Set the register pointer to (0x00)
  Wire.write((byte)0x00);
  // Set the seconds to zero.
  Wire.write(0);
  // Set the minutes to zero.
  Wire.write(0);
  // Set the hours to zero.
  Wire.write(0);
  // Set the weekDay to Sunday.
  Wire.write(1);
  // Set the monthDay to one.
  Wire.write(7);
  // Set the month to July. (July and August both have 31 days, therefore calculating weeks between the two makes life easy.
  Wire.write(1);
  // Set the year to 2001. (No leap-year).
  Wire.write(1);
  // End Write Transmission
  Wire.endTransmission();

}

void loop()
{
  // Open I2C line in write mode
  Wire.beginTransmission(0x68);
  // Set the register pointer to (0x00)
  Wire.write((byte)0x00);
  // End Write Transmission
  Wire.endTransmission();

  // Open the I2C line in send mode
  Wire.requestFrom(0x68, 7);

  // Read the seconds from the first byte. (Mask to 0x7f).
  seconds = bcdToDec(Wire.read() & 0x7f);
  // Read the minutes from the second byte.
  minutes = bcdToDec(Wire.read());
  // Read the hours from the third byte. (Mask to 0x3f).
  hours = bcdToDec(Wire.read() & 0x3f);

  weekDays = bcdToDec(Wire.read());

  monthDays = bcdToDec(Wire.read());

  months = bcdToDec(Wire.read());

  years = bcdToDec(Wire.read());

  // Reset segments.
  resetSegments();
  // Convert the seconds, minutes, and hours to their corresponding segments.
  convertToSeg(seconds, minutes, hours);

  // Write the data to the shift register.
  writeToSegments();

  // DEBUG //
  /*
    Serial.print(seconds);  Serial.print(" seconds : ");
    Serial.print(minutes);  Serial.print(" minutes : ");
    Serial.print(hours);  Serial.print(" hours : ");
    Serial.print(weekDays);  Serial.print(" weekDays : ");
    Serial.print(monthDays);  Serial.print(" monthDays : ");
    Serial.print(months);  Serial.print(" months : ");
    Serial.print(years);  Serial.println(" years");

    Serial.println();
  */
  for (int i = 0; i < numSegments; i++) {
    Serial.print(segments[i]);
  }
  Serial.print("---");
  Serial.println(seconds);

  delay(10);

}
